{"ast":null,"code":"import _classCallCheck from \"D:\\\\DS\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\DS\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\DS\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\DS\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\DS\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"D:\\\\DS\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"D:\\\\DS\\\\react-demo\\\\src\\\\person\\\\components\\\\person-form.js\";\nimport React from 'react';\nimport validate from \"./validators/person-validators\";\nimport Button from \"react-bootstrap/Button\";\nimport * as API_USERS from \"../api/person-api\";\nimport APIResponseErrorMessage from \"../../commons/errorhandling/api-response-error-message\";\nimport { Col, Row } from \"reactstrap\";\nimport { FormGroup, Input, Label } from 'reactstrap';\n\nvar PersonForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PersonForm, _React$Component);\n\n  function PersonForm(props) {\n    var _this;\n\n    _classCallCheck(this, PersonForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PersonForm).call(this, props));\n\n    _this.handleChange = function (event) {\n      var name = event.target.name;\n      var value = event.target.value;\n      var updatedControls = _this.state.formControls;\n      var updatedFormElement = updatedControls[name];\n      updatedFormElement.value = value;\n      updatedFormElement.touched = true;\n      console.log(\"ValidaTION Rules : \" + updatedFormElement.validationRules);\n      updatedFormElement.valid = validate(value, updatedFormElement.validationRules);\n      updatedControls[name] = updatedFormElement;\n      var formIsValid = true;\n\n      for (var updatedFormElementName in updatedControls) {\n        formIsValid = updatedControls[updatedFormElementName].valid && formIsValid;\n      }\n\n      _this.setState({\n        formControls: updatedControls,\n        formIsValid: formIsValid\n      });\n    };\n\n    _this.toggleForm = _this.toggleForm.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.reloadHandler = _this.props.reloadHandler;\n    _this.state = {\n      errorStatus: 0,\n      error: null,\n      formIsValid: false,\n      formControls: {\n        name: {\n          value: '',\n          placeholder: 'What is your name?...',\n          valid: false,\n          touched: false,\n          validationRules: {\n            minLength: 3,\n            isRequired: true\n          }\n        },\n        email: {\n          value: '',\n          placeholder: 'Email...',\n          valid: false,\n          touched: false,\n          validationRules: {\n            emailValidator: true\n          }\n        },\n        age: {\n          value: '',\n          placeholder: 'Age...',\n          valid: false,\n          touched: false\n        },\n        address: {\n          value: '',\n          placeholder: 'Cluj, Zorilor, Str. Lalelelor 21...',\n          valid: false,\n          touched: false\n        }\n      }\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(PersonForm, [{\n    key: \"toggleForm\",\n    value: function toggleForm() {\n      this.setState({\n        collapseForm: !this.state.collapseForm\n      });\n    }\n  }, {\n    key: \"registerPerson\",\n    value: function registerPerson(person) {\n      var _this2 = this;\n\n      return API_USERS.postPerson(person, function (result, status, error) {\n        if (result !== null && (status === 200 || status === 201)) {\n          console.log(\"Successfully inserted person with id: \" + result);\n\n          _this2.reloadHandler();\n        } else {\n          _this2.setState({\n            errorStatus: status,\n            error: error\n          });\n        }\n      });\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit() {\n      var person = {\n        name: this.state.formControls.name.value,\n        email: this.state.formControls.email.value,\n        age: this.state.formControls.age.value,\n        address: this.state.formControls.address.value\n      };\n      console.log(person);\n      this.registerPerson(person);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        id: \"name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"nameField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, \" Name: \"), React.createElement(Input, {\n        name: \"name\",\n        id: \"nameField\",\n        placeholder: this.state.formControls.name.placeholder,\n        onChange: this.handleChange,\n        defaultValue: this.state.formControls.name.value,\n        touched: this.state.formControls.name.touched ? 1 : 0,\n        valid: this.state.formControls.name.valid,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }), this.state.formControls.name.touched && !this.state.formControls.name.valid && React.createElement(\"div\", {\n        className: \"error-message row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, \" * Name must have at least 3 characters \")), React.createElement(FormGroup, {\n        id: \"email\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"emailField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, \" Email: \"), React.createElement(Input, {\n        name: \"email\",\n        id: \"emailField\",\n        placeholder: this.state.formControls.email.placeholder,\n        onChange: this.handleChange,\n        defaultValue: this.state.formControls.email.value,\n        touched: this.state.formControls.email.touched ? 1 : 0,\n        valid: this.state.formControls.email.valid,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }), this.state.formControls.email.touched && !this.state.formControls.email.valid && React.createElement(\"div\", {\n        className: \"error-message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, \" * Email must have a valid format\")), React.createElement(FormGroup, {\n        id: \"address\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"addressField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, \" Address: \"), React.createElement(Input, {\n        name: \"address\",\n        id: \"addressField\",\n        placeholder: this.state.formControls.address.placeholder,\n        onChange: this.handleChange,\n        defaultValue: this.state.formControls.address.value,\n        touched: this.state.formControls.address.touched ? 1 : 0,\n        valid: this.state.formControls.address.valid,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        id: \"age\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"ageField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, \" Age: \"), React.createElement(Input, {\n        name: \"age\",\n        id: \"ageField\",\n        placeholder: this.state.formControls.age.placeholder,\n        min: 0,\n        max: 100,\n        type: \"number\",\n        onChange: this.handleChange,\n        defaultValue: this.state.formControls.age.value,\n        touched: this.state.formControls.age.touched ? 1 : 0,\n        valid: this.state.formControls.age.valid,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      })), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, React.createElement(Col, {\n        sm: {\n          size: '4',\n          offset: 8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"submit\",\n        disabled: !this.state.formIsValid,\n        onClick: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, \"  Submit \"))), this.state.errorStatus > 0 && React.createElement(APIResponseErrorMessage, {\n        errorStatus: this.state.errorStatus,\n        error: this.state.error,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return PersonForm;\n}(React.Component);\n\nexport default PersonForm;","map":{"version":3,"sources":["D:\\DS\\react-demo\\src\\person\\components\\person-form.js"],"names":["React","validate","Button","API_USERS","APIResponseErrorMessage","Col","Row","FormGroup","Input","Label","PersonForm","props","handleChange","event","name","target","value","updatedControls","state","formControls","updatedFormElement","touched","console","log","validationRules","valid","formIsValid","updatedFormElementName","setState","toggleForm","bind","reloadHandler","errorStatus","error","placeholder","minLength","isRequired","email","emailValidator","age","address","handleSubmit","collapseForm","person","postPerson","result","status","registerPerson","size","offset","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport validate from \"./validators/person-validators\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport * as API_USERS from \"../api/person-api\";\r\nimport APIResponseErrorMessage from \"../../commons/errorhandling/api-response-error-message\";\r\nimport {Col, Row} from \"reactstrap\";\r\nimport { FormGroup, Input, Label} from 'reactstrap';\r\n\r\n\r\n\r\nclass PersonForm extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggleForm = this.toggleForm.bind(this);\r\n        this.reloadHandler = this.props.reloadHandler;\r\n\r\n        this.state = {\r\n\r\n            errorStatus: 0,\r\n            error: null,\r\n\r\n            formIsValid: false,\r\n\r\n            formControls: {\r\n                name: {\r\n                    value: '',\r\n                    placeholder: 'What is your name?...',\r\n                    valid: false,\r\n                    touched: false,\r\n                    validationRules: {\r\n                        minLength: 3,\r\n                        isRequired: true\r\n                    }\r\n                },\r\n                email: {\r\n                    value: '',\r\n                    placeholder: 'Email...',\r\n                    valid: false,\r\n                    touched: false,\r\n                    validationRules: {\r\n                        emailValidator: true\r\n                    }\r\n                },\r\n                age: {\r\n                    value: '',\r\n                    placeholder: 'Age...',\r\n                    valid: false,\r\n                    touched: false,\r\n                },\r\n                address: {\r\n                    value: '',\r\n                    placeholder: 'Cluj, Zorilor, Str. Lalelelor 21...',\r\n                    valid: false,\r\n                    touched: false,\r\n                },\r\n            }\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n   toggleForm() {\r\n        this.setState({collapseForm: !this.state.collapseForm});\r\n    }\r\n\r\n\r\n    handleChange = event => {\r\n\r\n        const name = event.target.name;\r\n        const value = event.target.value;\r\n\r\n        const updatedControls = this.state.formControls;\r\n\r\n        const updatedFormElement = updatedControls[name];\r\n\r\n        updatedFormElement.value = value;\r\n        updatedFormElement.touched = true;\r\n        console.log(\"ValidaTION Rules : \"+updatedFormElement.validationRules)\r\n        updatedFormElement.valid = validate(value, updatedFormElement.validationRules);\r\n        updatedControls[name] = updatedFormElement;\r\n\r\n        let formIsValid = true;\r\n        for (let updatedFormElementName in updatedControls) {\r\n            formIsValid = updatedControls[updatedFormElementName].valid && formIsValid;\r\n        }\r\n\r\n        this.setState({\r\n            formControls: updatedControls,\r\n            formIsValid: formIsValid\r\n        });\r\n\r\n    };\r\n\r\n    registerPerson(person) {\r\n        return API_USERS.postPerson(person, (result, status, error) => {\r\n            if (result !== null && (status === 200 || status === 201)) {\r\n                console.log(\"Successfully inserted person with id: \" + result);\r\n                this.reloadHandler();\r\n            } else {\r\n                this.setState(({\r\n                    errorStatus: status,\r\n                    error: error\r\n                }));\r\n            }\r\n        });\r\n    }\r\n\r\n    handleSubmit() {\r\n        let person = {\r\n            name: this.state.formControls.name.value,\r\n            email: this.state.formControls.email.value,\r\n            age: this.state.formControls.age.value,\r\n            address: this.state.formControls.address.value\r\n        };\r\n\r\n        console.log(person);\r\n        this.registerPerson(person);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n\r\n                <FormGroup id='name'>\r\n                    <Label for='nameField'> Name: </Label>\r\n                    <Input name='name' id='nameField' placeholder={this.state.formControls.name.placeholder}\r\n                           onChange={this.handleChange}\r\n                           defaultValue={this.state.formControls.name.value}\r\n                           touched={this.state.formControls.name.touched? 1 : 0}\r\n                           valid={this.state.formControls.name.valid}\r\n                           required\r\n                    />\r\n                    {this.state.formControls.name.touched && !this.state.formControls.name.valid &&\r\n                    <div className={\"error-message row\"}> * Name must have at least 3 characters </div>}\r\n                </FormGroup>\r\n\r\n                <FormGroup id='email'>\r\n                    <Label for='emailField'> Email: </Label>\r\n                    <Input name='email' id='emailField' placeholder={this.state.formControls.email.placeholder}\r\n                           onChange={this.handleChange}\r\n                           defaultValue={this.state.formControls.email.value}\r\n                           touched={this.state.formControls.email.touched? 1 : 0}\r\n                           valid={this.state.formControls.email.valid}\r\n                           required\r\n                    />\r\n                    {this.state.formControls.email.touched && !this.state.formControls.email.valid &&\r\n                    <div className={\"error-message\"}> * Email must have a valid format</div>}\r\n                </FormGroup>\r\n\r\n                <FormGroup id='address'>\r\n                    <Label for='addressField'> Address: </Label>\r\n                    <Input name='address' id='addressField' placeholder={this.state.formControls.address.placeholder}\r\n                           onChange={this.handleChange}\r\n                           defaultValue={this.state.formControls.address.value}\r\n                           touched={this.state.formControls.address.touched? 1 : 0}\r\n                           valid={this.state.formControls.address.valid}\r\n                           required\r\n                    />\r\n                </FormGroup>\r\n\r\n                <FormGroup id='age'>\r\n                    <Label for='ageField'> Age: </Label>\r\n                    <Input name='age' id='ageField' placeholder={this.state.formControls.age.placeholder}\r\n                           min={0} max={100} type=\"number\"\r\n                           onChange={this.handleChange}\r\n                           defaultValue={this.state.formControls.age.value}\r\n                           touched={this.state.formControls.age.touched? 1 : 0}\r\n                           valid={this.state.formControls.age.valid}\r\n                           required\r\n                    />\r\n                </FormGroup>\r\n\r\n                    <Row>\r\n                        <Col sm={{size: '4', offset: 8}}>\r\n                            <Button type={\"submit\"} disabled={!this.state.formIsValid} onClick={this.handleSubmit}>  Submit </Button>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                {\r\n                    this.state.errorStatus > 0 &&\r\n                    <APIResponseErrorMessage errorStatus={this.state.errorStatus} error={this.state.error}/>\r\n                }\r\n            </div>\r\n        ) ;\r\n    }\r\n}\r\n\r\nexport default PersonForm;\r\n"]},"metadata":{},"sourceType":"module"}