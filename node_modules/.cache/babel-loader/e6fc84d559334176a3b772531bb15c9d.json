{"ast":null,"code":"import _classCallCheck from \"D:\\\\DS\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\DS\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\DS\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\DS\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\DS\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"D:\\\\DS\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"D:\\\\DS\\\\react-demo\\\\src\\\\medication\\\\medication-page.js\";\nimport React from 'react';\nimport validate from \"./validators/medication-validators\";\nimport Button from \"react-bootstrap/Button\";\nimport APIResponseErrorMessage from \"../commons/errorhandling/api-response-error-message\";\nimport { Col, Row } from \"reactstrap\";\nimport { FormGroup, Input, Label } from 'reactstrap';\nimport { Redirect } from 'react-router';\nimport * as DOCTOR_API from \"./api/medication-api\";\nimport { Card, CardHeader, Modal, ModalBody, ModalHeader } from 'reactstrap';\n\nvar MedicationPage =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MedicationPage, _React$Component);\n\n  function MedicationPage(props) {\n    var _this;\n\n    _classCallCheck(this, MedicationPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MedicationPage).call(this, props));\n    _this.state = {\n      redirect: false,\n      redirectTo: \"/\",\n      medicationId: props.match.params.id,\n      medication: null,\n      isLoaded: false,\n      errorStatus: 0,\n      error: \"\",\n      showMessage: false,\n      messsage: \"\",\n      formIsValid: false,\n      formControls: {\n        name: {\n          value: '',\n          placeholder: 'What is the medication\\'s name?',\n          valid: false,\n          touched: false,\n          validationRules: {\n            minLength: 3,\n            isRequired: false\n          }\n        },\n        dosage: {\n          value: '',\n          placeholder: 'What is the medication\\'s dosage?',\n          valid: false,\n          touched: false,\n          validationRules: {\n            minLength: 3,\n            isRequired: true\n          }\n        },\n        sideEffects: {\n          value: '',\n          placeholder: 'What is the medication\\'s sideEffects?',\n          valid: false,\n          touched: false,\n          validationRules: {\n            minLength: 3,\n            isRequired: false\n          }\n        }\n      }\n    };\n    _this.fetchMedication = _this.fetchMedication.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.registerMedication = _this.registerMedication.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.toogleMessage = _this.toogleMessage.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.goToMedicationHome = _this.goToMedicationHome.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.afterFetchMedication = _this.afterFetchMedication.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleDelete = _this.handleDelete.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.deleteMedication = _this.deleteMedication.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(MedicationPage, [{\n    key: \"fetchMedication\",\n    value: function fetchMedication() {\n      var _this2 = this;\n\n      var newParams = {\n        \"id\": this.state.medicationId\n      };\n      return DOCTOR_API.getMedicationById(newParams, function (result, status, err) {\n        if (result !== null && status === 200) {\n          _this2.state.medication = result;\n          _this2.state.isLoaded = true;\n          _this2.state.formControls.name.value = result.name;\n          _this2.state.formControls.dosage.value = result.dosage;\n          _this2.state.formControls.sideEffects.value = result.sideEffects;\n\n          _this2.setState(_this2.state);\n\n          _this2.afterFetchMedication();\n        } else {\n          _this2.state.errorStatus = status;\n          _this2.state.error = err;\n\n          _this2.setState(_this2.state);\n        }\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchMedication();\n    }\n  }, {\n    key: \"afterFetchMedication\",\n    value: function afterFetchMedication() {\n      var formIsValid = true;\n\n      for (var formElementName in this.state.formControls) {\n        this.state.formControls[formElementName].valid = validate(this.state.formControls[formElementName].value, this.state.formControls[formElementName].validationRules);\n        this.setState(this.state);\n        formIsValid = this.state.formControls[formElementName].valid && formIsValid;\n      }\n\n      var newState = this.state;\n      newState.formIsValid = formIsValid;\n      this.setState(newState);\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      var name = event.target.name;\n      var value = event.target.value;\n      var updatedControls = this.state.formControls;\n      var updatedFormElement = updatedControls[name];\n      updatedFormElement.value = value;\n      updatedFormElement.touched = true;\n      updatedFormElement.valid = validate(value, updatedFormElement.validationRules);\n      updatedControls[name] = updatedFormElement;\n      var formIsValid = true;\n\n      for (var updatedFormElementName in updatedControls) {\n        formIsValid = updatedControls[updatedFormElementName].valid && formIsValid;\n      }\n\n      var newState = this.state;\n      newState.formControls = updatedControls;\n      newState.formIsValid = formIsValid;\n      this.setState(newState);\n    }\n  }, {\n    key: \"registerMedication\",\n    value: function registerMedication(medication) {\n      var _this3 = this;\n\n      return DOCTOR_API.postUpdateMedication(medication, function (result, status, error) {\n        if (result !== null && (status === 200 || status === 201)) {\n          console.log(\"Successfully updated medication with id: \" + result);\n          _this3.state.messsage = \"Successfully updated medication with id: \" + result;\n          _this3.state.showMessage = true;\n\n          _this3.setState(_this3.state);\n        } else {\n          var newState = _this3.state;\n          newState.errorStatus = status;\n          newState.error = error;\n\n          _this3.setState(newState);\n        }\n      });\n    }\n  }, {\n    key: \"deleteMedication\",\n    value: function deleteMedication(medicationId) {\n      var _this4 = this;\n\n      return DOCTOR_API.deleteMedication(medicationId, function (result, status, error) {\n        if (result !== null && (status === 200 || status === 201)) {\n          console.log(\"Successfully deleted medication with id: \" + result);\n          _this4.state.messsage = \"Successfully deleted medication with id: \" + result;\n          _this4.state.showMessage = true;\n\n          _this4.setState(_this4.state);\n        } else {\n          var newState = _this4.state;\n          newState.errorStatus = status;\n          newState.error = error;\n\n          _this4.setState(newState);\n        }\n      });\n    }\n  }, {\n    key: \"toogleMessage\",\n    value: function toogleMessage() {\n      this.state.showMessage = false;\n      this.setState(this.state);\n    }\n  }, {\n    key: \"goToMedicationHome\",\n    value: function goToMedicationHome() {\n      this.state.redirectTo = \"/doctorHome\";\n      this.state.redirect = true;\n      this.setState(this.state);\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit() {\n      var medication = {\n        id: this.state.medication.id,\n        name: this.state.formControls.name.value,\n        dosage: this.state.formControls.dosage.value,\n        sideEffects: this.state.formControls.sideEffects.value\n      };\n      console.log(medication);\n      this.registerMedication(medication);\n    }\n  }, {\n    key: \"handleDelete\",\n    value: function handleDelete() {\n      var medicationId = this.state.medicationId;\n      this.deleteMedication(medicationId);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log(\"REDER);\");\n      console.log(this.state.isLoaded);\n      console.log(this.state.redirect);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }, this.state.redirect === false && React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240\n        },\n        __self: this\n      }, \" \", this.state.medicationId), this.state.redirect === false && this.state.isLoaded === true && React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }, \" \", JSON.stringify(this.state.medication)), \" \", React.createElement(Button, {\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }, \" \", this.state.medicationId)), this.state.redirect === true && React.createElement(Redirect, {\n        to: this.state.redirectTo,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }), React.createElement(Button, {\n        type: \"submit\",\n        onClick: this.goToMedicationHome,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }, \"  Go to Doctor Home Page \"), React.createElement(FormGroup, {\n        id: \"name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"nameField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }, \" Name: \"), React.createElement(Input, {\n        name: \"name\",\n        id: \"nameField\",\n        placeholder: this.state.formControls.name.placeholder,\n        onChange: this.handleChange,\n        defaultValue: this.state.formControls.name.value,\n        touched: this.state.formControls.name.touched ? 1 : 0,\n        valid: this.state.formControls.name.valid,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248\n        },\n        __self: this\n      }), this.state.formControls.name.touched && !this.state.formControls.name.valid && React.createElement(\"div\", {\n        className: \"error-message row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      }, \" * Name must have at least 3 characters \")), React.createElement(FormGroup, {\n        id: \"dosage\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"dosageField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }, \" Dosage: \"), React.createElement(Input, {\n        name: \"dosage\",\n        id: \"dosageField\",\n        placeholder: this.state.formControls.dosage.placeholder,\n        onChange: this.handleChange,\n        defaultValue: this.state.formControls.dosage.value,\n        touched: this.state.formControls.dosage.touched ? 1 : 0,\n        valid: this.state.formControls.dosage.valid,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262\n        },\n        __self: this\n      }), this.state.formControls.dosage.touched && !this.state.formControls.dosage.valid && React.createElement(\"div\", {\n        className: \"error-message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270\n        },\n        __self: this\n      }, \" * Username must have at least 3 characters\")), React.createElement(FormGroup, {\n        id: \"sideEffects\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"sideEffectsField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274\n        },\n        __self: this\n      }, \" SideEffects: \"), React.createElement(Input, {\n        name: \"sideEffects\",\n        id: \"sideEffectsField\",\n        placeholder: this.state.formControls.sideEffects.placeholder,\n        onChange: this.handleChange,\n        defaultValue: this.state.formControls.sideEffects.value,\n        touched: this.state.formControls.sideEffects.touched ? 1 : 0,\n        valid: this.state.formControls.sideEffects.valid,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275\n        },\n        __self: this\n      })), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284\n        },\n        __self: this\n      }, React.createElement(Col, {\n        sm: {\n          size: '4',\n          offset: 8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"submit\",\n        disabled: !this.state.formIsValid,\n        onClick: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286\n        },\n        __self: this\n      }, \"  Update \"))), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289\n        },\n        __self: this\n      }, React.createElement(Col, {\n        sm: {\n          size: '4',\n          offset: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"delete\",\n        disabled: !this.state.formIsValid,\n        onClick: this.handleDelete,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291\n        },\n        __self: this\n      }, \"  Delete \"))), this.state.showMessage && React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298\n        },\n        __self: this\n      }, this.state.messsage), React.createElement(Button, {\n        type: \"submit\",\n        onClick: this.toogleMessage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299\n        },\n        __self: this\n      }, \"  OK \")), this.state.showMessage && React.createElement(Modal, {\n        isOpen: this.state.showMessage,\n        toggle: this.toogleMessage,\n        className: this.props.className,\n        size: \"lg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307\n        },\n        __self: this\n      }, React.createElement(ModalHeader, {\n        toggle: this.toogleMessage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309\n        },\n        __self: this\n      }, \" Medication Updated \")), this.state.errorStatus > 0 && React.createElement(APIResponseErrorMessage, {\n        errorStatus: this.state.errorStatus,\n        error: this.state.error,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return MedicationPage;\n}(React.Component);\n\nexport default MedicationPage;","map":{"version":3,"sources":["D:\\DS\\react-demo\\src\\medication\\medication-page.js"],"names":["React","validate","Button","APIResponseErrorMessage","Col","Row","FormGroup","Input","Label","Redirect","DOCTOR_API","Card","CardHeader","Modal","ModalBody","ModalHeader","MedicationPage","props","state","redirect","redirectTo","medicationId","match","params","id","medication","isLoaded","errorStatus","error","showMessage","messsage","formIsValid","formControls","name","value","placeholder","valid","touched","validationRules","minLength","isRequired","dosage","sideEffects","fetchMedication","bind","handleChange","handleSubmit","registerMedication","toogleMessage","goToMedicationHome","afterFetchMedication","handleDelete","deleteMedication","newParams","getMedicationById","result","status","err","setState","formElementName","newState","event","target","updatedControls","updatedFormElement","updatedFormElementName","postUpdateMedication","console","log","JSON","stringify","size","offset","className","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport validate from \"./validators/medication-validators\";\r\nimport Button from \"react-bootstrap/Button\";\r\n import APIResponseErrorMessage from \"../commons/errorhandling/api-response-error-message\";\r\nimport {Col, Row} from \"reactstrap\";\r\nimport { FormGroup, Input, Label} from 'reactstrap';\r\nimport { Redirect } from 'react-router';\r\nimport * as DOCTOR_API from \"./api/medication-api\";\r\nimport {\r\n    Card,\r\n    CardHeader,\r\n    Modal,\r\n    ModalBody,\r\n    ModalHeader\r\n} from 'reactstrap';\r\n \r\nclass MedicationPage extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\nredirect : false,\r\nredirectTo : \"/\",\r\nmedicationId : props.match.params.id,\r\nmedication : null,\r\nisLoaded : false,\r\nerrorStatus : 0,\r\nerror : \"\",\r\nshowMessage : false,\r\nmesssage : \"\",\r\nformIsValid: false,\r\nformControls: {\r\n    \r\n    \r\n        name: {\r\n            value: '',\r\n            placeholder: 'What is the medication\\'s name?',\r\n            valid: false,\r\n            touched: false,\r\n            validationRules: {\r\n                minLength: 3,\r\n                isRequired: false\r\n            }\r\n        },\r\n        dosage: {\r\n            value: '',\r\n            placeholder: 'What is the medication\\'s dosage?',\r\n            valid: false,\r\n            touched: false,\r\n            validationRules: {\r\n                minLength: 3,\r\n                isRequired: true\r\n            }\r\n        },\r\n        sideEffects: {\r\n            value: '',\r\n            placeholder: 'What is the medication\\'s sideEffects?',\r\n            valid: false,\r\n            touched: false,\r\n            validationRules: {\r\n                minLength: 3,\r\n                isRequired: false\r\n            }\r\n        }\r\n\r\n          \r\n     \r\n}\r\n\r\n \r\n        }\r\n            this.fetchMedication = this.fetchMedication.bind(this);\r\nthis.handleChange = this.handleChange.bind(this);\r\nthis.handleSubmit = this.handleSubmit.bind(this);\r\nthis.registerMedication = this.registerMedication.bind(this);\r\nthis.toogleMessage = this.toogleMessage.bind(this);\r\nthis.goToMedicationHome = this.goToMedicationHome.bind(this);\r\nthis.afterFetchMedication = this.afterFetchMedication.bind(this);\r\nthis.handleDelete = this.handleDelete.bind(this);\r\nthis.deleteMedication = this.deleteMedication.bind(this);\r\n    }\r\n\r\n    fetchMedication() {\r\n        let newParams = {\"id\" :  this.state.medicationId};\r\n        return DOCTOR_API.getMedicationById(newParams,(result, status, err) => {\r\n            if (result !== null && status === 200) {\r\n                  this.state.medication = result;\r\n                 this.state.isLoaded = true;\r\n                 this.state.formControls.name.value = result.name;\r\n                 this.state.formControls.dosage.value = result.dosage;\r\n                 this.state.formControls.sideEffects.value = result.sideEffects;\r\n                  this.setState(this.state);\r\n                 this.afterFetchMedication();\r\n             } else {\r\n                  this.state.errorStatus = status;\r\n                 this.state.error = err;\r\n                 this.setState(this.state);\r\n                 \r\n            }\r\n         \r\n        });\r\n    }\r\ncomponentDidMount()\r\n{\r\n    this.fetchMedication();\r\n\r\n   \r\n\r\n\r\n}\r\n\r\nafterFetchMedication()\r\n{\r\n    let formIsValid = true;\r\n    for (let formElementName in this.state.formControls) {\r\n        this.state.formControls[formElementName].valid = validate(this.state.formControls[formElementName].value, this.state.formControls[formElementName].validationRules);\r\n    \r\n \r\n        this.setState(this.state);\r\n        formIsValid = this.state.formControls[formElementName].valid && formIsValid;\r\n    }\r\n\r\n     let newState = this.state;\r\n newState.formIsValid = formIsValid;\r\nthis.setState(newState);\r\n}\r\n\r\n\r\n\r\nhandleChange (event) {\r\n\r\n    const name = event.target.name;\r\n    const value = event.target.value;\r\n\r\n    const updatedControls = this.state.formControls;\r\n\r\n    const updatedFormElement = updatedControls[name];\r\n\r\n    updatedFormElement.value = value;\r\n    updatedFormElement.touched = true;\r\n    updatedFormElement.valid = validate(value, updatedFormElement.validationRules);\r\n    updatedControls[name] = updatedFormElement;\r\n \r\n    let formIsValid = true;\r\n    for (let updatedFormElementName in updatedControls) {\r\n        formIsValid = updatedControls[updatedFormElementName].valid && formIsValid;\r\n    }\r\n\r\n   \r\n    let newState = this.state;\r\nnewState.formControls = updatedControls;\r\nnewState.formIsValid = formIsValid;\r\nthis.setState(newState);\r\n\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\nregisterMedication(medication) {\r\n    return DOCTOR_API.postUpdateMedication(medication, (result, status, error) => {\r\n        if (result !== null && (status === 200 || status === 201)) {\r\n            console.log(\"Successfully updated medication with id: \" + result);\r\n             \r\n            this.state.messsage =\"Successfully updated medication with id: \" + result;\r\n            this.state.showMessage = true;\r\n            this.setState(this.state);\r\n\r\n         } else {\r\n            let newState = this.state;\r\n            newState.errorStatus = status;\r\n            newState.error = error;\r\n            this.setState(newState);\r\n        }\r\n    });\r\n}\r\n\r\ndeleteMedication(medicationId) {\r\n    return DOCTOR_API.deleteMedication(medicationId, (result, status, error) => {\r\n        if (result !== null && (status === 200 || status === 201)) {\r\n            console.log(\"Successfully deleted medication with id: \" + result);\r\n             \r\n            this.state.messsage =\"Successfully deleted medication with id: \" + result;\r\n            this.state.showMessage = true;\r\n            this.setState(this.state);\r\n\r\n         } else {\r\n            let newState = this.state;\r\n            newState.errorStatus = status;\r\n            newState.error = error;\r\n            this.setState(newState);\r\n        }\r\n    });\r\n}\r\ntoogleMessage()\r\n{\r\n    this.state.showMessage = false;\r\n    this.setState(this.state);\r\n}\r\ngoToMedicationHome()\r\n{\r\n    this.state.redirectTo = \"/doctorHome\";\r\n    this.state.redirect = true;\r\n    this.setState(this.state);\r\n}\r\nhandleSubmit() {\r\n    let medication = {\r\n        id: this.state.medication.id,\r\n        name: this.state.formControls.name.value,\r\n        dosage: this.state.formControls.dosage.value,\r\n        sideEffects: this.state.formControls.sideEffects.value,\r\n     };\r\n\r\n    console.log(medication);\r\n    this.registerMedication(medication);\r\n}\r\n\r\nhandleDelete() {\r\n    let medicationId = this.state.medicationId;\r\n\r\n     this.deleteMedication(medicationId);\r\n    \r\n}\r\n\r\n\r\n\r\n\r\n    render() {\r\n        console.log(\"REDER);\");\r\n        console.log(this.state.isLoaded);\r\n        console.log(this.state.redirect);\r\n\r\n        return (\r\n            <div>\r\n\r\n                \r\n                 {this.state.redirect === false &&    <p> {this.state.medicationId}</p>}\r\n                { this.state.redirect === false && this.state.isLoaded === true  &&  <div><p> {JSON.stringify(this.state.medication)}</p> <Button color=\"primary\"> {this.state.medicationId}</Button></div> }\r\n                 {this.state.redirect === true && <Redirect to = {this.state.redirectTo}/>}\r\n\r\n                 <Button type={\"submit\"}   onClick={this.goToMedicationHome}>  Go to Doctor Home Page </Button>\r\n\r\n                < FormGroup id='name'>\r\n                    <Label for='nameField'> Name: </Label>\r\n                    <Input name='name' id='nameField' placeholder={this.state.formControls.name.placeholder}\r\n                           onChange={this.handleChange}\r\n                           defaultValue={this.state.formControls.name.value}\r\n                           touched={this.state.formControls.name.touched? 1 : 0}\r\n                           valid={this.state.formControls.name.valid}\r\n                           required\r\n                    />\r\n                    {this.state.formControls.name.touched && !this.state.formControls.name.valid &&\r\n                    <div className={\"error-message row\"}> * Name must have at least 3 characters </div>}\r\n                </FormGroup>\r\n\r\n\r\n                <FormGroup id='dosage'>\r\n                    <Label for='dosageField'> Dosage: </Label>\r\n                    <Input name='dosage' id='dosageField' placeholder={this.state.formControls.dosage.placeholder}\r\n                           onChange={this.handleChange}\r\n                           defaultValue={this.state.formControls.dosage.value}\r\n                           touched={this.state.formControls.dosage.touched? 1 : 0}\r\n                           valid={this.state.formControls.dosage.valid}\r\n                           required\r\n                    />\r\n                    {this.state.formControls.dosage.touched && !this.state.formControls.dosage.valid &&\r\n                    <div className={\"error-message\"}> * Username must have at least 3 characters</div>}\r\n                </FormGroup>\r\n\r\n                <FormGroup id='sideEffects'>\r\n                    <Label for='sideEffectsField'> SideEffects: </Label>\r\n                    <Input name='sideEffects' id='sideEffectsField' placeholder={this.state.formControls.sideEffects.placeholder}\r\n                           onChange={this.handleChange}\r\n                           defaultValue={this.state.formControls.sideEffects.value}\r\n                           touched={this.state.formControls.sideEffects.touched? 1 : 0}\r\n                           valid={this.state.formControls.sideEffects.valid}\r\n                           required\r\n                    />\r\n                </FormGroup>\r\n\r\n                <Row>\r\n                        <Col sm={{size: '4', offset: 8}}>\r\n                            <Button type={\"submit\"} disabled={!this.state.formIsValid} onClick={this.handleSubmit}>  Update </Button>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col sm={{size: '4', offset: 1}}>\r\n                            <Button type={\"delete\"} disabled={!this.state.formIsValid} onClick={this.handleDelete}>  Delete </Button>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    \r\n               {this.state.showMessage && \r\n                     <div>\r\n                            <p>{this.state.messsage}</p>\r\n                            <Button type={\"submit\"}   onClick={this.toogleMessage}>  OK </Button>\r\n                            </div>\r\n                        \r\n                    \r\n    }\r\n\r\n    {this.state.showMessage && \r\n\r\n<Modal isOpen={this.state.showMessage} toggle={this.toogleMessage}\r\nclassName={this.props.className} size=\"lg\">\r\n<ModalHeader toggle={this.toogleMessage}> Medication Updated </ModalHeader>\r\n \r\n</Modal>\r\n    }\r\n\r\n                    {\r\n                    this.state.errorStatus > 0 &&\r\n                    <APIResponseErrorMessage errorStatus={this.state.errorStatus} error={this.state.error}/>\r\n                }\r\n\r\n\r\n            \r\n                    \r\n            </div>\r\n        ) ;\r\n    }\r\n}\r\n\r\nexport default MedicationPage;\r\n"]},"metadata":{},"sourceType":"module"}