{"ast":null,"code":"import _classCallCheck from \"D:\\\\DS\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\DS\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\DS\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\DS\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\DS\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"D:\\\\DS\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"D:\\\\DS\\\\react-demo\\\\src\\\\medication-period\\\\medication-period-form.js\";\nimport React from 'react';\nimport validate from \"./validators/medication-period-validators\";\nimport Button from \"react-bootstrap/Button\";\nimport * as MEDICATION_PERIOD_API from \"./api/medication-period-api\";\nimport APIResponseErrorMessage from \"../commons/errorhandling/api-response-error-message\";\nimport { Col, Row } from \"reactstrap\";\nimport { FormGroup, Input, Label } from 'reactstrap';\n\nvar MedicationPeriodForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MedicationPeriodForm, _React$Component);\n\n  function MedicationPeriodForm(props) {\n    var _this;\n\n    _classCallCheck(this, MedicationPeriodForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MedicationPeriodForm).call(this, props));\n\n    _this.handleChange = function (event) {\n      var name = event.target.name;\n      var value = event.target.value;\n      var updatedControls = _this.state.formControls;\n      var updatedFormElement = updatedControls[name];\n      updatedFormElement.value = value;\n      updatedFormElement.touched = true;\n      updatedFormElement.valid = validate(value, updatedFormElement.validationRules);\n      updatedControls[name] = updatedFormElement;\n      var formIsValid = true;\n\n      for (var updatedFormElementName in updatedControls) {\n        formIsValid = updatedControls[updatedFormElementName].valid && formIsValid;\n      }\n\n      _this.setState({\n        formControls: updatedControls,\n        formIsValid: formIsValid\n      });\n    };\n\n    _this.toggleForm = _this.toggleForm.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.reloadHandler = _this.props.reloadHandler;\n    _this.state = {\n      patientId: _this.props.patientId,\n      errorStatus: 0,\n      error: null,\n      formIsValid: false,\n      formControls: {\n        startDate: {\n          value: '',\n          placeholder: 'What is the start date?...',\n          valid: false,\n          touched: false,\n          validationRules: {\n            minLength: 10,\n            isRequired: true,\n            dateValidator: true\n          }\n        },\n        stopDate: {\n          value: '',\n          placeholder: 'What is the stop date?...',\n          valid: false,\n          touched: false,\n          validationRules: {\n            minLength: 10,\n            required: true,\n            dateValidator: true\n          }\n        }\n      }\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(MedicationPeriodForm, [{\n    key: \"toggleForm\",\n    value: function toggleForm() {\n      this.setState({\n        collapseForm: !this.state.collapseForm\n      });\n    }\n  }, {\n    key: \"registerMedicationPeriod\",\n    value: function registerMedicationPeriod(mP) {\n      var _this2 = this;\n\n      console.log(JSON.stringify(mP));\n      return MEDICATION_PERIOD_API.postMedicationPeriod(mP, function (result, status, error) {\n        if (result !== null && (status === 200 || status === 201)) {\n          console.log(\"Successfully inserted medication period with id: \" + result);\n\n          _this2.reloadHandler();\n        } else {\n          _this2.setState({\n            errorStatus: status,\n            error: error\n          });\n        }\n      });\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit() {\n      var medicationPeriod = {\n        patientId: this.state.patientId,\n        startDate: this.state.formControls.startDate.value,\n        stopDate: this.state.formControls.stopDate.value,\n        medicationId: null\n      };\n      console.log(medicationPeriod);\n      this.registerMedicationPeriod(medicationPeriod);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        id: \"startDate\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"startDateField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, \" startDate: \"), React.createElement(Input, {\n        name: \"startDate\",\n        id: \"startDateField\",\n        placeholder: this.state.formControls.startDate.placeholder,\n        onChange: this.handleChange,\n        defaultValue: this.state.formControls.startDate.value,\n        touched: this.state.formControls.startDate.touched ? 1 : 0,\n        valid: this.state.formControls.startDate.valid,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }), this.state.formControls.startDate.touched && !this.state.formControls.startDate.valid && React.createElement(\"div\", {\n        className: \"error-message row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, \" * startDate format not valid \")), React.createElement(FormGroup, {\n        id: \"stopDate\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"stopDateField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, \" stopDate: \"), React.createElement(Input, {\n        name: \"stopDate\",\n        id: \"stopDateField\",\n        placeholder: this.state.formControls.stopDate.placeholder,\n        onChange: this.handleChange,\n        defaultValue: this.state.formControls.stopDate.value,\n        touched: this.state.formControls.stopDate.touched ? 1 : 0,\n        valid: this.state.formControls.stopDate.valid,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }), this.state.formControls.stopDate.touched && !this.state.formControls.stopDate.valid && React.createElement(\"div\", {\n        className: \"error-message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, \" * stopDate format not valid\")), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(Col, {\n        sm: {\n          size: '4',\n          offset: 8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"submit\",\n        disabled: !this.state.formIsValid,\n        onClick: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, \"  Submit \"))), this.state.errorStatus > 0 && React.createElement(APIResponseErrorMessage, {\n        errorStatus: this.state.errorStatus,\n        error: this.state.error,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return MedicationPeriodForm;\n}(React.Component);\n\nexport default MedicationPeriodForm;","map":{"version":3,"sources":["D:\\DS\\react-demo\\src\\medication-period\\medication-period-form.js"],"names":["React","validate","Button","MEDICATION_PERIOD_API","APIResponseErrorMessage","Col","Row","FormGroup","Input","Label","MedicationPeriodForm","props","handleChange","event","name","target","value","updatedControls","state","formControls","updatedFormElement","touched","valid","validationRules","formIsValid","updatedFormElementName","setState","toggleForm","bind","reloadHandler","patientId","errorStatus","error","startDate","placeholder","minLength","isRequired","dateValidator","stopDate","required","handleSubmit","collapseForm","mP","console","log","JSON","stringify","postMedicationPeriod","result","status","medicationPeriod","medicationId","registerMedicationPeriod","size","offset","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport validate from \"./validators/medication-period-validators\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport * as MEDICATION_PERIOD_API from \"./api/medication-period-api\";\r\nimport APIResponseErrorMessage from \"../commons/errorhandling/api-response-error-message\";\r\nimport {Col, Row} from \"reactstrap\";\r\nimport { FormGroup, Input, Label} from 'reactstrap';\r\n\r\n\r\n\r\nclass MedicationPeriodForm extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggleForm = this.toggleForm.bind(this);\r\n        this.reloadHandler = this.props.reloadHandler;\r\n\r\n        this.state = {\r\n            patientId : this.props.patientId,\r\n            errorStatus: 0,\r\n            error: null,\r\n\r\n            formIsValid: false,\r\n\r\n            formControls: {\r\n                startDate: {\r\n                    value: '',\r\n                    placeholder: 'What is the start date?...',\r\n                    valid: false,\r\n                    touched: false,\r\n                    validationRules: {\r\n                        minLength: 10,\r\n                        isRequired: true,\r\n                        dateValidator : true\r\n                    }\r\n                },\r\n                stopDate: {\r\n                    value: '',\r\n                    placeholder: 'What is the stop date?...',\r\n                    valid: false,\r\n                    touched: false,\r\n                    validationRules: {\r\n\r\nminLength: 10 ,\r\nrequired : true,\r\ndateValidator : true                    }\r\n                }\r\n                 \r\n            }\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n   toggleForm() {\r\n        this.setState({collapseForm: !this.state.collapseForm});\r\n    }\r\n\r\n\r\n    handleChange = event => {\r\n\r\n        const name = event.target.name;\r\n        const value = event.target.value;\r\n\r\n        const updatedControls = this.state.formControls;\r\n\r\n        const updatedFormElement = updatedControls[name];\r\n\r\n        updatedFormElement.value = value;\r\n        updatedFormElement.touched = true;\r\n        updatedFormElement.valid = validate(value, updatedFormElement.validationRules);\r\n        updatedControls[name] = updatedFormElement;\r\n\r\n        let formIsValid = true;\r\n        for (let updatedFormElementName in updatedControls) {\r\n            formIsValid = updatedControls[updatedFormElementName].valid && formIsValid;\r\n        }\r\n\r\n        this.setState({\r\n            formControls: updatedControls,\r\n            formIsValid: formIsValid\r\n        });\r\n\r\n    };\r\n\r\n    registerMedicationPeriod(mP) {\r\n        console.log(JSON.stringify(mP));\r\n        return MEDICATION_PERIOD_API.postMedicationPeriod(mP, (result, status, error) => {\r\n            if (result !== null && (status === 200 || status === 201)) {\r\n                console.log(\"Successfully inserted medication period with id: \" + result);\r\n                this.reloadHandler();\r\n            } else {\r\n                this.setState(({\r\n                    errorStatus: status,\r\n                    error: error\r\n                }));\r\n            }\r\n        });\r\n    }\r\n\r\n    handleSubmit() {\r\n        let medicationPeriod = {\r\n            patientId: this.state.patientId,\r\n            startDate: this.state.formControls.startDate.value,\r\n            stopDate: this.state.formControls.stopDate.value,\r\n            medicationId: null\r\n            \r\n        };\r\n\r\n        console.log(medicationPeriod);\r\n        this.registerMedicationPeriod(medicationPeriod);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n\r\n                <FormGroup id='startDate'>\r\n                    <Label for='startDateField'> startDate: </Label>\r\n                    <Input name='startDate' id='startDateField' placeholder={this.state.formControls.startDate.placeholder}\r\n                           onChange={this.handleChange}\r\n                           defaultValue={this.state.formControls.startDate.value}\r\n                           touched={this.state.formControls.startDate.touched? 1 : 0}\r\n                           valid={this.state.formControls.startDate.valid}\r\n                           required\r\n                    />\r\n                    {this.state.formControls.startDate.touched && !this.state.formControls.startDate.valid &&\r\n                    <div className={\"error-message row\"}> * startDate format not valid </div>}\r\n                </FormGroup>\r\n\r\n                <FormGroup id='stopDate'>\r\n                    <Label for='stopDateField'> stopDate: </Label>\r\n                    <Input name='stopDate' id='stopDateField' placeholder={this.state.formControls.stopDate.placeholder}\r\n                           onChange={this.handleChange}\r\n                           defaultValue={this.state.formControls.stopDate.value}\r\n                           touched={this.state.formControls.stopDate.touched? 1 : 0}\r\n                           valid={this.state.formControls.stopDate.valid}\r\n                           required\r\n                    />\r\n                    {this.state.formControls.stopDate.touched && !this.state.formControls.stopDate.valid &&\r\n                    <div className={\"error-message\"}> * stopDate format not valid</div>}\r\n                </FormGroup>\r\n \r\n                    <Row>\r\n                        <Col sm={{size: '4', offset: 8}}>\r\n                            <Button type={\"submit\"} disabled={!this.state.formIsValid} onClick={this.handleSubmit}>  Submit </Button>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                {\r\n                    this.state.errorStatus > 0 &&\r\n                    <APIResponseErrorMessage errorStatus={this.state.errorStatus} error={this.state.error}/>\r\n                }\r\n            </div>\r\n        ) ;\r\n    }\r\n}\r\n\r\nexport default MedicationPeriodForm;\r\n"]},"metadata":{},"sourceType":"module"}