{"ast":null,"code":"import _classCallCheck from \"D:\\\\DS\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\DS\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\DS\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\DS\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\DS\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"D:\\\\DS\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"D:\\\\DS\\\\react-demo\\\\src\\\\doctor\\\\doctor-page.js\";\nimport React from 'react';\nimport validate from \"./validators/doctor-validators\";\nimport Button from \"react-bootstrap/Button\";\nimport APIResponseErrorMessage from \"../commons/errorhandling/api-response-error-message\";\nimport { Col, Row } from \"reactstrap\";\nimport { FormGroup, Input, Label } from 'reactstrap';\nimport { Redirect } from 'react-router';\nimport * as DOCTOR_API from \"./api/doctor-api\";\nimport { Card, CardHeader, Modal, ModalBody, ModalHeader } from 'reactstrap';\n\nvar DoctorPage =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DoctorPage, _React$Component);\n\n  function DoctorPage(props) {\n    var _this;\n\n    _classCallCheck(this, DoctorPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DoctorPage).call(this, props));\n    _this.state = {\n      redirect: false,\n      redirectTo: \"/\",\n      doctorId: props.match.params.id,\n      doctor: null,\n      isLoaded: false,\n      errorStatus: 0,\n      error: \"\",\n      showMessage: false,\n      messsage: \"\",\n      formIsValid: false,\n      formControls: {\n        name: {\n          value: '',\n          placeholder: 'What is the doctor\\'s name?',\n          valid: false,\n          touched: false,\n          validationRules: {\n            minLength: 3,\n            isRequired: false\n          }\n        },\n        username: {\n          value: '',\n          placeholder: 'What is the doctor\\'s username?',\n          valid: false,\n          touched: false,\n          validationRules: {\n            minLength: 3,\n            isRequired: true\n          }\n        },\n        password: {\n          value: '',\n          placeholder: 'What is the doctor\\'s Password?',\n          valid: false,\n          touched: false,\n          validationRules: {\n            minLength: 3,\n            isRequired: false\n          }\n        }\n      }\n    };\n    _this.fetchDoctor = _this.fetchDoctor.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.registerDoctor = _this.registerDoctor.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.toogleMessage = _this.toogleMessage.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.goToDoctorHome = _this.goToDoctorHome.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.afterFetchDoctor = _this.afterFetchDoctor.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(DoctorPage, [{\n    key: \"fetchDoctor\",\n    value: function fetchDoctor() {\n      var _this2 = this;\n\n      var newParams = {\n        \"id\": this.state.doctorId\n      };\n      return DOCTOR_API.getDoctorById(newParams, function (result, status, err) {\n        if (result !== null && status === 200) {\n          _this2.state.doctor = result;\n          _this2.state.isLoaded = true;\n          _this2.state.formControls.name.value = result.name;\n          _this2.state.formControls.username.value = result.username;\n          _this2.state.formControls.password.value = result.password;\n          console.log(\"NEEEEEEEEEEWWWWW\", JSON.stringify(_this2.state));\n\n          _this2.setState(_this2.state);\n\n          _this2.afterFetchDoctor();\n        } else {\n          _this2.state.errorStatus = status;\n          _this2.state.error = err;\n\n          _this2.setState(_this2.state);\n        }\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchDoctor();\n    }\n  }, {\n    key: \"afterFetchDoctor\",\n    value: function afterFetchDoctor() {\n      var formIsValid = true;\n\n      for (var formElementName in this.state.formControls) {\n        this.state.formControls[formElementName].valid = validate(this.state.formControls[formElementName].value, this.state.formControls[formElementName].validationRules);\n        console.log(\"Elem: \" + JSON.stringify(this.state.formControls[formElementName]));\n        this.setState(this.state);\n        formIsValid = this.state.formControls[formElementName].valid && formIsValid;\n      }\n\n      console.log(\"VVVVVALAVAVALAL: \" + formIsValid);\n      var newState = this.state;\n      newState.formIsValid = formIsValid;\n      this.setState(newState);\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      var name = event.target.name;\n      var value = event.target.value;\n      var updatedControls = this.state.formControls;\n      var updatedFormElement = updatedControls[name];\n      updatedFormElement.value = value;\n      updatedFormElement.touched = true;\n      updatedFormElement.valid = validate(value, updatedFormElement.validationRules);\n      updatedControls[name] = updatedFormElement;\n      console.log(\"ValidaTION Rules : \" + updatedFormElement.validationRules);\n      var formIsValid = true;\n\n      for (var updatedFormElementName in updatedControls) {\n        formIsValid = updatedControls[updatedFormElementName].valid && formIsValid;\n      }\n\n      var newState = this.state;\n      newState.formControls = updatedControls;\n      newState.formIsValid = formIsValid;\n      this.setState(newState);\n    }\n  }, {\n    key: \"registerDoctor\",\n    value: function registerDoctor(doctor) {\n      var _this3 = this;\n\n      return DOCTOR_API.postUpdateDoctor(doctor, function (result, status, error) {\n        if (result !== null && (status === 200 || status === 201)) {\n          console.log(\"Successfully updated doctor with id: \" + result);\n          _this3.state.messsage = \"Successfully updated doctor with id: \" + result;\n          _this3.state.showMessage = true;\n\n          _this3.setState(_this3.state);\n        } else {\n          var newState = _this3.state;\n          newState.errorStatus = status;\n          newState.error = error;\n\n          _this3.setState(newState);\n        }\n      });\n    }\n  }, {\n    key: \"toogleMessage\",\n    value: function toogleMessage() {\n      this.state.showMessage = false;\n      this.setState(this.state);\n    }\n  }, {\n    key: \"goToDoctorHome\",\n    value: function goToDoctorHome() {\n      this.state.redirectTo = \"/doctorHome\";\n      this.state.redirect = true;\n      this.setState(this.state);\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit() {\n      var doctor = {\n        id: this.state.doctor.id,\n        name: this.state.formControls.name.value,\n        username: this.state.formControls.username.value,\n        password: this.state.formControls.password.value\n      };\n      console.log(doctor);\n      this.registerDoctor(doctor);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log(\"REDER);\");\n      console.log(this.state.isLoaded);\n      console.log(this.state.redirect);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, this.state.redirect === false && React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, \" \", this.state.doctorId), this.state.redirect === false && this.state.isLoaded === true && React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, \" \", JSON.stringify(this.state.doctor)), \" \", React.createElement(Button, {\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, \" \", this.state.doctorId)), this.state.redirect === true && React.createElement(Redirect, {\n        to: this.state.redirectTo,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }), React.createElement(Button, {\n        type: \"submit\",\n        onClick: this.goToDoctorHome,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }, \"  Go to Doctor Home Page \"), React.createElement(FormGroup, {\n        id: \"name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"nameField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }, \" Name: \"), React.createElement(Input, {\n        name: \"name\",\n        id: \"nameField\",\n        placeholder: this.state.formControls.name.placeholder,\n        onChange: this.handleChange,\n        defaultValue: this.state.formControls.name.value,\n        touched: this.state.formControls.name.touched ? 1 : 0,\n        valid: this.state.formControls.name.valid,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }), this.state.formControls.name.touched && !this.state.formControls.name.valid && React.createElement(\"div\", {\n        className: \"error-message row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }, \" * Name must have at least 3 characters \")), React.createElement(FormGroup, {\n        id: \"username\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"usernameField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }, \" Username: \"), React.createElement(Input, {\n        name: \"username\",\n        id: \"usernameField\",\n        placeholder: this.state.formControls.username.placeholder,\n        onChange: this.handleChange,\n        defaultValue: this.state.formControls.username.value,\n        touched: this.state.formControls.username.touched ? 1 : 0,\n        valid: this.state.formControls.username.valid,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }), this.state.formControls.username.touched && !this.state.formControls.username.valid && React.createElement(\"div\", {\n        className: \"error-message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }, \" * Username must have at least 3 characters\")), React.createElement(FormGroup, {\n        id: \"password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"passwordField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }, \" Password: \"), React.createElement(Input, {\n        name: \"password\",\n        id: \"passwordField\",\n        placeholder: this.state.formControls.password.placeholder,\n        onChange: this.handleChange,\n        defaultValue: this.state.formControls.password.value,\n        touched: this.state.formControls.password.touched ? 1 : 0,\n        valid: this.state.formControls.password.valid,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      })), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }, React.createElement(Col, {\n        sm: {\n          size: '4',\n          offset: 8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"submit\",\n        disabled: !this.state.formIsValid,\n        onClick: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263\n        },\n        __self: this\n      }, \"  Update \"))), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266\n        },\n        __self: this\n      }, React.createElement(Col, {\n        sm: {\n          size: '4',\n          offset: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"red\",\n        disabled: !this.state.formIsValid,\n        onClick: this.handleDelete,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268\n        },\n        __self: this\n      }, \"  Delete \"))), this.state.showMessage && React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275\n        },\n        __self: this\n      }, this.state.messsage), React.createElement(Button, {\n        type: \"submit\",\n        onClick: this.toogleMessage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }, \"  OK \")), this.state.showMessage && React.createElement(Modal, {\n        isOpen: this.state.showMessage,\n        toggle: this.toogleMessage,\n        className: this.props.className,\n        size: \"lg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284\n        },\n        __self: this\n      }, React.createElement(ModalHeader, {\n        toggle: this.toogleMessage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286\n        },\n        __self: this\n      }, \" Doctor Updated \")), this.state.errorStatus > 0 && React.createElement(APIResponseErrorMessage, {\n        errorStatus: this.state.errorStatus,\n        error: this.state.error,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return DoctorPage;\n}(React.Component);\n\nexport default DoctorPage;","map":{"version":3,"sources":["D:\\DS\\react-demo\\src\\doctor\\doctor-page.js"],"names":["React","validate","Button","APIResponseErrorMessage","Col","Row","FormGroup","Input","Label","Redirect","DOCTOR_API","Card","CardHeader","Modal","ModalBody","ModalHeader","DoctorPage","props","state","redirect","redirectTo","doctorId","match","params","id","doctor","isLoaded","errorStatus","error","showMessage","messsage","formIsValid","formControls","name","value","placeholder","valid","touched","validationRules","minLength","isRequired","username","password","fetchDoctor","bind","handleChange","handleSubmit","registerDoctor","toogleMessage","goToDoctorHome","afterFetchDoctor","newParams","getDoctorById","result","status","err","console","log","JSON","stringify","setState","formElementName","newState","event","target","updatedControls","updatedFormElement","updatedFormElementName","postUpdateDoctor","size","offset","handleDelete","className","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport validate from \"./validators/doctor-validators\";\r\nimport Button from \"react-bootstrap/Button\";\r\n import APIResponseErrorMessage from \"../commons/errorhandling/api-response-error-message\";\r\nimport {Col, Row} from \"reactstrap\";\r\nimport { FormGroup, Input, Label} from 'reactstrap';\r\nimport { Redirect } from 'react-router';\r\nimport * as DOCTOR_API from \"./api/doctor-api\";\r\nimport {\r\n    Card,\r\n    CardHeader,\r\n    Modal,\r\n    ModalBody,\r\n    ModalHeader\r\n} from 'reactstrap';\r\n \r\nclass DoctorPage extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\nredirect : false,\r\nredirectTo : \"/\",\r\ndoctorId : props.match.params.id,\r\ndoctor : null,\r\nisLoaded : false,\r\nerrorStatus : 0,\r\nerror : \"\",\r\nshowMessage : false,\r\nmesssage : \"\",\r\nformIsValid: false,\r\nformControls: {\r\n    \r\n    \r\n        name: {\r\n            value: '',\r\n            placeholder: 'What is the doctor\\'s name?',\r\n            valid: false,\r\n            touched: false,\r\n            validationRules: {\r\n                minLength: 3,\r\n                isRequired: false\r\n            }\r\n        },\r\n        username: {\r\n            value: '',\r\n            placeholder: 'What is the doctor\\'s username?',\r\n            valid: false,\r\n            touched: false,\r\n            validationRules: {\r\n                minLength: 3,\r\n                isRequired: true\r\n            }\r\n        },\r\n        password: {\r\n            value: '',\r\n            placeholder: 'What is the doctor\\'s Password?',\r\n            valid: false,\r\n            touched: false,\r\n            validationRules: {\r\n                minLength: 3,\r\n                isRequired: false\r\n            }\r\n        }\r\n\r\n          \r\n     \r\n}\r\n\r\n \r\n        }\r\n            this.fetchDoctor = this.fetchDoctor.bind(this);\r\nthis.handleChange = this.handleChange.bind(this);\r\nthis.handleSubmit = this.handleSubmit.bind(this);\r\nthis.registerDoctor = this.registerDoctor.bind(this);\r\nthis.toogleMessage = this.toogleMessage.bind(this);\r\nthis.goToDoctorHome = this.goToDoctorHome.bind(this);\r\nthis.afterFetchDoctor = this.afterFetchDoctor.bind(this);\r\n    }\r\n\r\n    fetchDoctor() {\r\n        let newParams = {\"id\" :  this.state.doctorId};\r\n        return DOCTOR_API.getDoctorById(newParams,(result, status, err) => {\r\n            if (result !== null && status === 200) {\r\n                  this.state.doctor = result;\r\n                 this.state.isLoaded = true;\r\n                 this.state.formControls.name.value = result.name;\r\n                 this.state.formControls.username.value = result.username;\r\n                 this.state.formControls.password.value = result.password;\r\n                 console.log(\"NEEEEEEEEEEWWWWW\", JSON.stringify(this.state));\r\n                 this.setState(this.state);\r\n                 this.afterFetchDoctor();\r\n             } else {\r\n                  this.state.errorStatus = status;\r\n                 this.state.error = err;\r\n                 this.setState(this.state);\r\n                 \r\n            }\r\n         \r\n        });\r\n    }\r\ncomponentDidMount()\r\n{\r\n    this.fetchDoctor();\r\n\r\n   \r\n\r\n\r\n}\r\n\r\nafterFetchDoctor()\r\n{\r\n    let formIsValid = true;\r\n    for (let formElementName in this.state.formControls) {\r\n        this.state.formControls[formElementName].valid = validate(this.state.formControls[formElementName].value, this.state.formControls[formElementName].validationRules);\r\n    \r\n        console.log(\"Elem: \"+ JSON.stringify(this.state.formControls[formElementName]));\r\n\r\n        this.setState(this.state);\r\n        formIsValid = this.state.formControls[formElementName].valid && formIsValid;\r\n    }\r\n\r\n   console.log(\"VVVVVALAVAVALAL: \"+formIsValid);\r\n    let newState = this.state;\r\n newState.formIsValid = formIsValid;\r\nthis.setState(newState);\r\n}\r\n\r\n\r\n\r\nhandleChange (event) {\r\n\r\n    const name = event.target.name;\r\n    const value = event.target.value;\r\n\r\n    const updatedControls = this.state.formControls;\r\n\r\n    const updatedFormElement = updatedControls[name];\r\n\r\n    updatedFormElement.value = value;\r\n    updatedFormElement.touched = true;\r\n    updatedFormElement.valid = validate(value, updatedFormElement.validationRules);\r\n    updatedControls[name] = updatedFormElement;\r\n    console.log(\"ValidaTION Rules : \"+updatedFormElement.validationRules);\r\n\r\n    let formIsValid = true;\r\n    for (let updatedFormElementName in updatedControls) {\r\n        formIsValid = updatedControls[updatedFormElementName].valid && formIsValid;\r\n    }\r\n\r\n   \r\n    let newState = this.state;\r\nnewState.formControls = updatedControls;\r\nnewState.formIsValid = formIsValid;\r\nthis.setState(newState);\r\n\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\nregisterDoctor(doctor) {\r\n    return DOCTOR_API.postUpdateDoctor(doctor, (result, status, error) => {\r\n        if (result !== null && (status === 200 || status === 201)) {\r\n            console.log(\"Successfully updated doctor with id: \" + result);\r\n             \r\n            this.state.messsage =\"Successfully updated doctor with id: \" + result;\r\n            this.state.showMessage = true;\r\n            this.setState(this.state);\r\n\r\n         } else {\r\n            let newState = this.state;\r\n            newState.errorStatus = status;\r\n            newState.error = error;\r\n            this.setState(newState);\r\n        }\r\n    });\r\n}\r\ntoogleMessage()\r\n{\r\n    this.state.showMessage = false;\r\n    this.setState(this.state);\r\n}\r\ngoToDoctorHome()\r\n{\r\n    this.state.redirectTo = \"/doctorHome\";\r\n    this.state.redirect = true;\r\n    this.setState(this.state);\r\n}\r\nhandleSubmit() {\r\n    let doctor = {\r\n        id: this.state.doctor.id,\r\n        name: this.state.formControls.name.value,\r\n        username: this.state.formControls.username.value,\r\n        password: this.state.formControls.password.value,\r\n     };\r\n\r\n    console.log(doctor);\r\n    this.registerDoctor(doctor);\r\n}\r\n\r\n\r\n\r\n\r\n    render() {\r\n        console.log(\"REDER);\");\r\n        console.log(this.state.isLoaded);\r\n        console.log(this.state.redirect);\r\n\r\n        return (\r\n            <div>\r\n\r\n                \r\n                 {this.state.redirect === false &&    <p> {this.state.doctorId}</p>}\r\n                { this.state.redirect === false && this.state.isLoaded === true  &&  <div><p> {JSON.stringify(this.state.doctor)}</p> <Button color=\"primary\"> {this.state.doctorId}</Button></div> }\r\n                 {this.state.redirect === true && <Redirect to = {this.state.redirectTo}/>}\r\n\r\n                 <Button type={\"submit\"}   onClick={this.goToDoctorHome}>  Go to Doctor Home Page </Button>\r\n\r\n                < FormGroup id='name'>\r\n                    <Label for='nameField'> Name: </Label>\r\n                    <Input name='name' id='nameField' placeholder={this.state.formControls.name.placeholder}\r\n                           onChange={this.handleChange}\r\n                           defaultValue={this.state.formControls.name.value}\r\n                           touched={this.state.formControls.name.touched? 1 : 0}\r\n                           valid={this.state.formControls.name.valid}\r\n                           required\r\n                    />\r\n                    {this.state.formControls.name.touched && !this.state.formControls.name.valid &&\r\n                    <div className={\"error-message row\"}> * Name must have at least 3 characters </div>}\r\n                </FormGroup>\r\n\r\n\r\n                <FormGroup id='username'>\r\n                    <Label for='usernameField'> Username: </Label>\r\n                    <Input name='username' id='usernameField' placeholder={this.state.formControls.username.placeholder}\r\n                           onChange={this.handleChange}\r\n                           defaultValue={this.state.formControls.username.value}\r\n                           touched={this.state.formControls.username.touched? 1 : 0}\r\n                           valid={this.state.formControls.username.valid}\r\n                           required\r\n                    />\r\n                    {this.state.formControls.username.touched && !this.state.formControls.username.valid &&\r\n                    <div className={\"error-message\"}> * Username must have at least 3 characters</div>}\r\n                </FormGroup>\r\n\r\n                <FormGroup id='password'>\r\n                    <Label for='passwordField'> Password: </Label>\r\n                    <Input name='password' id='passwordField' placeholder={this.state.formControls.password.placeholder}\r\n                           onChange={this.handleChange}\r\n                           defaultValue={this.state.formControls.password.value}\r\n                           touched={this.state.formControls.password.touched? 1 : 0}\r\n                           valid={this.state.formControls.password.valid}\r\n                           required\r\n                    />\r\n                </FormGroup>\r\n\r\n                <Row>\r\n                        <Col sm={{size: '4', offset: 8}}>\r\n                            <Button type={\"submit\"} disabled={!this.state.formIsValid} onClick={this.handleSubmit}>  Update </Button>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col sm={{size: '4', offset: 1}}>\r\n                            <Button color = \"red\" disabled={!this.state.formIsValid} onClick={this.handleDelete}>  Delete </Button>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    \r\n               {this.state.showMessage && \r\n                     <div>\r\n                            <p>{this.state.messsage}</p>\r\n                            <Button type={\"submit\"}   onClick={this.toogleMessage}>  OK </Button>\r\n                            </div>\r\n                        \r\n                    \r\n    }\r\n\r\n    {this.state.showMessage && \r\n\r\n<Modal isOpen={this.state.showMessage} toggle={this.toogleMessage}\r\nclassName={this.props.className} size=\"lg\">\r\n<ModalHeader toggle={this.toogleMessage}> Doctor Updated </ModalHeader>\r\n \r\n</Modal>\r\n    }\r\n\r\n                    {\r\n                    this.state.errorStatus > 0 &&\r\n                    <APIResponseErrorMessage errorStatus={this.state.errorStatus} error={this.state.error}/>\r\n                }\r\n\r\n\r\n            \r\n                    \r\n            </div>\r\n        ) ;\r\n    }\r\n}\r\n\r\nexport default DoctorPage;\r\n"]},"metadata":{},"sourceType":"module"}