{"ast":null,"code":"var minLengthValidator = function minLengthValidator(value, minLength) {\n  return value.length >= minLength;\n};\n\nvar requiredValidator = function requiredValidator(value) {\n  return value.trim() !== '';\n};\n\nvar dateValidator = function dateValidator(value) {\n  var re = /^\\d{4}\\-(0[1-9]|1[012])\\-(0[1-9]|[12][0-9]|3[01])$/;\n  return re.test(String(value).toLowerCase());\n};\n\nvar validate = function validate(value, rules) {\n  var isValid = true;\n\n  for (var rule in rules) {\n    switch (rule) {\n      case 'minLength':\n        isValid = isValid && minLengthValidator(value, rules[rule]);\n        break;\n\n      case 'isRequired':\n        isValid = isValid && requiredValidator(value);\n        break;\n\n      case 'dateValidator':\n        isValid = isValid && dateValidator(value);\n        break;\n\n      default:\n        isValid = true;\n    }\n  }\n\n  return isValid;\n};\n\nexport default validate;","map":{"version":3,"sources":["D:\\DS\\react-demo\\src\\patient\\validators\\patient-validators.js"],"names":["minLengthValidator","value","minLength","length","requiredValidator","trim","dateValidator","re","test","String","toLowerCase","validate","rules","isValid","rule"],"mappings":"AACA,IAAMA,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,KAAD,EAAQC,SAAR,EAAsB;AAC7C,SAAOD,KAAK,CAACE,MAAN,IAAgBD,SAAvB;AACH,CAFD;;AAIA,IAAME,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAH,KAAK,EAAI;AAC/B,SAAOA,KAAK,CAACI,IAAN,OAAiB,EAAxB;AACH,CAFD;;AAKA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAL,KAAK,EAAI;AAC/B,MAAMM,EAAE,GAAG,oDAAX;AACI,SAAOA,EAAE,CAACC,IAAH,CAAQC,MAAM,CAACR,KAAD,CAAN,CAAcS,WAAd,EAAR,CAAP;AACH,CAHD;;AAKA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACV,KAAD,EAAQW,KAAR,EAAkB;AAC/B,MAAIC,OAAO,GAAG,IAAd;;AAEA,OAAK,IAAIC,IAAT,IAAiBF,KAAjB,EAAwB;AAEpB,YAAQE,IAAR;AACI,WAAK,WAAL;AAAkBD,QAAAA,OAAO,GAAGA,OAAO,IAAIb,kBAAkB,CAACC,KAAD,EAAQW,KAAK,CAACE,IAAD,CAAb,CAAvC;AACA;;AAElB,WAAK,YAAL;AAAmBD,QAAAA,OAAO,GAAGA,OAAO,IAAIT,iBAAiB,CAACH,KAAD,CAAtC;AACA;;AAEA,WAAK,eAAL;AAAsBY,QAAAA,OAAO,GAAGA,OAAO,IAAIP,aAAa,CAACL,KAAD,CAAlC;AACtB;;AAGnB;AAASY,QAAAA,OAAO,GAAG,IAAV;AAXb;AAcH;;AAED,SAAOA,OAAP;AACH,CAtBD;;AAwBA,eAAeF,QAAf","sourcesContent":["\r\nconst minLengthValidator = (value, minLength) => {\r\n    return value.length >= minLength;\r\n};\r\n\r\nconst requiredValidator = value => {\r\n    return value.trim() !== '';\r\n};\r\n\r\n \r\nconst dateValidator = value => {\r\nconst re = /^\\d{4}\\-(0[1-9]|1[012])\\-(0[1-9]|[12][0-9]|3[01])$/;\r\n    return re.test(String(value).toLowerCase())  \r\n};\r\n\r\nconst validate = (value, rules) => {\r\n    let isValid = true;\r\n\r\n    for (let rule in rules) {\r\n\r\n        switch (rule) {\r\n            case 'minLength': isValid = isValid && minLengthValidator(value, rules[rule]);\r\n                              break;\r\n\r\n            case 'isRequired': isValid = isValid && requiredValidator(value);\r\n                               break;\r\n\r\n                               case 'dateValidator': isValid = isValid && dateValidator(value);\r\n                               break;\r\n\r\n\r\n            default: isValid = true;\r\n        }\r\n\r\n    }\r\n\r\n    return isValid;\r\n};\r\n\r\nexport default validate;\r\n"]},"metadata":{},"sourceType":"module"}