{"ast":null,"code":"import _classCallCheck from \"D:\\\\DS\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\DS\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\DS\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\DS\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\DS\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"D:\\\\DS\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"D:\\\\DS\\\\react-demo\\\\src\\\\medication-time\\\\medication-time-form.js\";\nimport React from 'react';\nimport validate from \"./validators/medication-time-validators\";\nimport Button from \"react-bootstrap/Button\";\nimport * as MEDICATION_TIME_API from \"./api/medication-time-api\";\nimport APIResponseErrorMessage from \"../commons/errorhandling/api-response-error-message\";\nimport { Col, Row } from \"reactstrap\";\nimport { FormGroup, Input, Label } from 'reactstrap';\nimport * as MEDICATION_API from \"../medication/api/medication-api\";\nimport { Card, CardHeader, Modal, ModalBody, ModalHeader } from 'reactstrap';\n\nvar MedicationTimeForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MedicationTimeForm, _React$Component);\n\n  function MedicationTimeForm(props) {\n    var _this;\n\n    _classCallCheck(this, MedicationTimeForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MedicationTimeForm).call(this, props));\n\n    _this.handleChange = function (event) {\n      var name = event.target.name;\n      var value = event.target.value;\n      var updatedControls = _this.state.formControls;\n      var updatedFormElement = updatedControls[name];\n      updatedFormElement.value = value;\n      updatedFormElement.touched = true;\n      updatedFormElement.valid = validate(value, updatedFormElement.validationRules);\n      updatedControls[name] = updatedFormElement;\n      var formIsValid = true;\n\n      for (var updatedFormElementName in updatedControls) {\n        formIsValid = updatedControls[updatedFormElementName].valid && formIsValid;\n      }\n\n      _this.setState({\n        formControls: updatedControls,\n        formIsValid: formIsValid\n      });\n    };\n\n    _this.toggleForm = _this.toggleForm.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.reloadHandler = _this.props.reloadHandler;\n    _this.state = {\n      medicationPeriodId: props.medicationPeriodId,\n      errorStatus: 0,\n      error: null,\n      formIsValid: false,\n      formControls: {\n        time: {\n          value: '',\n          placeholder: 'What is the time?...',\n          valid: false,\n          touched: false,\n          validationRules: {\n            minLength: 8,\n            isRequired: true,\n            timeValidator: true\n          }\n        }\n      }\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(MedicationTimeForm, [{\n    key: \"toggleForm\",\n    value: function toggleForm() {\n      this.setState({\n        collapseForm: !this.state.collapseForm\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"registerMedicationTime\",\n    value: function registerMedicationTime(mP) {\n      var _this2 = this;\n\n      console.log(JSON.stringify(mP));\n      return MEDICATION_TIME_API.postMedicationTime(mP, function (result, status, error) {\n        if (result !== null && (status === 200 || status === 201)) {\n          console.log(\"Successfully inserted medication time with id: \" + result);\n\n          _this2.reloadHandler();\n        } else {\n          _this2.setState({\n            errorStatus: status,\n            error: error\n          });\n        }\n      });\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit() {\n      var medicationTime = {\n        medicationPeriodId: this.state.medicationPeriodId,\n        time: this.state.formControls.time.value\n      };\n      console.log(medicationTime);\n      this.registerMedicationTime(medicationTime);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        id: \"time\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"timeField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, \" time: \"), React.createElement(Input, {\n        name: \"time\",\n        id: \"timeField\",\n        placeholder: this.state.formControls.time.placeholder,\n        onChange: this.handleChange,\n        defaultValue: this.state.formControls.time.value,\n        touched: this.state.formControls.time.touched ? 1 : 0,\n        valid: this.state.formControls.time.valid,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }), this.state.formControls.time.touched && !this.state.formControls.time.valid && React.createElement(\"div\", {\n        className: \"error-message row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, \" * time format not valid \")), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, React.createElement(Col, {\n        sm: {\n          size: '4',\n          offset: 8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"submit\",\n        disabled: !this.state.formIsValid,\n        onClick: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, \"  Submit \"))), this.state.errorStatus > 0 && React.createElement(APIResponseErrorMessage, {\n        errorStatus: this.state.errorStatus,\n        error: this.state.error,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return MedicationTimeForm;\n}(React.Component);\n\nexport default MedicationTimeForm;","map":{"version":3,"sources":["D:\\DS\\react-demo\\src\\medication-time\\medication-time-form.js"],"names":["React","validate","Button","MEDICATION_TIME_API","APIResponseErrorMessage","Col","Row","FormGroup","Input","Label","MEDICATION_API","Card","CardHeader","Modal","ModalBody","ModalHeader","MedicationTimeForm","props","handleChange","event","name","target","value","updatedControls","state","formControls","updatedFormElement","touched","valid","validationRules","formIsValid","updatedFormElementName","setState","toggleForm","bind","reloadHandler","medicationPeriodId","errorStatus","error","time","placeholder","minLength","isRequired","timeValidator","handleSubmit","collapseForm","mP","console","log","JSON","stringify","postMedicationTime","result","status","medicationTime","registerMedicationTime","size","offset","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport validate from \"./validators/medication-time-validators\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport * as MEDICATION_TIME_API from \"./api/medication-time-api\";\r\nimport APIResponseErrorMessage from \"../commons/errorhandling/api-response-error-message\";\r\nimport {Col, Row} from \"reactstrap\";\r\nimport { FormGroup, Input, Label} from 'reactstrap';\r\nimport * as MEDICATION_API from \"../medication/api/medication-api\";\r\n import {\r\n \r\n    Card,\r\n    CardHeader,\r\n     Modal,\r\n    ModalBody,\r\n    ModalHeader,\r\n    \r\n} from 'reactstrap';\r\n\r\n\r\nclass MedicationTimeForm extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggleForm = this.toggleForm.bind(this);\r\n        this.reloadHandler = this.props.reloadHandler;\r\n\r\n        this.state = {\r\n            medicationPeriodId : props.medicationPeriodId,\r\n            errorStatus: 0,\r\n            error: null,\r\n          \r\n            formIsValid: false,\r\n\r\n            formControls: {\r\n                time: {\r\n                    value: '',\r\n                    placeholder: 'What is the time?...',\r\n                    valid: false,\r\n                    touched: false,\r\n                    validationRules: {\r\n                        minLength: 8,\r\n                        isRequired: true,\r\n                        timeValidator : true\r\n                    }\r\n                }\r\n                 \r\n            }\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n     \r\n    }\r\n\r\n   toggleForm() {\r\n        this.setState({collapseForm: !this.state.collapseForm});\r\n    }\r\n\r\n\r\n\r\ncomponentDidMount()\r\n{\r\n } \r\n\r\n\r\n    handleChange = event => {\r\n\r\n        const name = event.target.name;\r\n        const value = event.target.value;\r\n\r\n        const updatedControls = this.state.formControls;\r\n\r\n        const updatedFormElement = updatedControls[name];\r\n\r\n        updatedFormElement.value = value;\r\n        updatedFormElement.touched = true;\r\n        updatedFormElement.valid = validate(value, updatedFormElement.validationRules);\r\n        updatedControls[name] = updatedFormElement;\r\n\r\n        let formIsValid = true;\r\n        for (let updatedFormElementName in updatedControls) {\r\n            formIsValid = updatedControls[updatedFormElementName].valid && formIsValid;\r\n        }\r\n\r\n        this.setState({\r\n            formControls: updatedControls,\r\n            formIsValid: formIsValid\r\n        });\r\n\r\n    };\r\n\r\n    registerMedicationTime(mP) {\r\n        console.log(JSON.stringify(mP));\r\n        return MEDICATION_TIME_API.postMedicationTime(mP, (result, status, error) => {\r\n            if (result !== null && (status === 200 || status === 201)) {\r\n                console.log(\"Successfully inserted medication time with id: \" + result);\r\n                this.reloadHandler();\r\n            } else {\r\n                this.setState(({\r\n                    errorStatus: status,\r\n                    error: error\r\n                }));\r\n            }\r\n        });\r\n    }\r\n\r\n    handleSubmit() {\r\n        let medicationTime = {\r\n            medicationPeriodId: this.state.medicationPeriodId,\r\n            time: this.state.formControls.time.value,\r\n              \r\n        };\r\n\r\n        console.log(medicationTime);\r\n        this.registerMedicationTime(medicationTime);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n\r\n                <FormGroup id='time'>\r\n                    <Label for='timeField'> time: </Label>\r\n                    <Input name='time' id='timeField' placeholder={this.state.formControls.time.placeholder}\r\n                           onChange={this.handleChange}\r\n                           defaultValue={this.state.formControls.time.value}\r\n                           touched={this.state.formControls.time.touched? 1 : 0}\r\n                           valid={this.state.formControls.time.valid}\r\n                           required\r\n                    />\r\n                    {this.state.formControls.time.touched && !this.state.formControls.time.valid &&\r\n                    <div className={\"error-message row\"}> * time format not valid </div>}\r\n                </FormGroup>\r\n\r\n                \r\n \r\n                    <Row>\r\n                        <Col sm={{size: '4', offset: 8}}>\r\n                            <Button type={\"submit\"} disabled={(!this.state.formIsValid) } onClick={this.handleSubmit}>  Submit </Button>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                {\r\n                    this.state.errorStatus > 0 &&\r\n                    <APIResponseErrorMessage errorStatus={this.state.errorStatus} error={this.state.error}/>\r\n                }\r\n\r\n \r\n\r\n            </div>\r\n        ) ;\r\n    }\r\n}\r\n\r\nexport default MedicationTimeForm;\r\n"]},"metadata":{},"sourceType":"module"}